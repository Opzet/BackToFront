//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v4.2.8.1
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.Entity.Infrastructure.Annotations;

namespace Models
{
   /// <inheritdoc/>
   public partial class ClassificationEF : DbContext
   {
      #region DbSets
      public virtual System.Data.Entity.DbSet<global::Models.Attribute> Attributes { get; set; }
      public virtual System.Data.Entity.DbSet<global::Models.AttributeKeys> AttributeKeys { get; set; }
      public virtual System.Data.Entity.DbSet<global::Models.Make> Makes { get; set; }
      public virtual System.Data.Entity.DbSet<global::Models.Model> Models { get; set; }
      public virtual System.Data.Entity.DbSet<global::Models.Product> Products { get; set; }
      public virtual System.Data.Entity.DbSet<global::Models.ProductImage> ProductImages { get; set; }
      public virtual System.Data.Entity.DbSet<global::Models.Type> Types { get; set; }
      #endregion DbSets

      #region Constructors

      partial void CustomInit();

      /// <summary>
      /// Default connection string
      /// </summary>
      public static string ConnectionString { get; set; } = @"Name=MyLocalDb";
      /// <inheritdoc />
      public ClassificationEF() : base(ConnectionString)
      {
         Configuration.LazyLoadingEnabled = false;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<ClassificationEF>(null);
         CustomInit();
      }

      /// <inheritdoc />
      public ClassificationEF(string connectionString) : base(connectionString)
      {
         Configuration.LazyLoadingEnabled = false;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<ClassificationEF>(null);
         CustomInit();
      }

      /// <inheritdoc />
      public ClassificationEF(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
      {
         Configuration.LazyLoadingEnabled = false;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<ClassificationEF>(null);
         CustomInit();
      }

      /// <inheritdoc />
      public ClassificationEF(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection) : base(existingConnection, contextOwnsConnection)
      {
         Configuration.LazyLoadingEnabled = false;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<ClassificationEF>(null);
         CustomInit();
      }

      /// <inheritdoc />
      public ClassificationEF(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection) : base(existingConnection, model, contextOwnsConnection)
      {
         Configuration.LazyLoadingEnabled = false;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<ClassificationEF>(null);
         CustomInit();
      }

      /// <inheritdoc />
      public ClassificationEF(System.Data.Entity.Infrastructure.DbCompiledModel model) : base(model)
      {
         Configuration.LazyLoadingEnabled = false;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<ClassificationEF>(null);
         CustomInit();
      }

      /// <inheritdoc />
      public ClassificationEF(System.Data.Entity.Core.Objects.ObjectContext objectContext, bool dbContextOwnsObjectContext) : base(objectContext, dbContextOwnsObjectContext)
      {
         Configuration.LazyLoadingEnabled = false;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<ClassificationEF>(null);
         CustomInit();
      }

      #endregion Constructors

      partial void OnModelCreatingImpl(System.Data.Entity.DbModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(System.Data.Entity.DbModelBuilder modelBuilder);

      /// <inheritdoc />
      protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);


         modelBuilder.Entity<global::Models.Attribute>()
                     .ToTable("Attributes", "dbo")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Models.Attribute>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Models.Attribute>()
                     .HasMany(x => x.Products)
                     .WithMany(x => x.Attributes)
                     .Map(x => { x.ToTable("Products_x_Attributes"); x.MapLeftKey("Attribute_Id"); x.MapRightKey("Product_Id"); });

         modelBuilder.Entity<global::Models.AttributeKeys>()
                     .ToTable("AttributeKeys", "dbo")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Models.AttributeKeys>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Models.AttributeKeys>()
                     .Property(t => t.Name)
                     .IsRequired();
         modelBuilder.Entity<global::Models.AttributeKeys>()
                     .HasMany(x => x.Attributes)
                     .WithRequired(x => x.AttributeKeys)
                     .Map(x => x.MapKey("AttributeKeysId"));

         modelBuilder.Entity<global::Models.Make>()
                     .ToTable("Makes", "dbo")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Models.Make>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Models.Make>()
                     .Property(t => t.Name)
                     .IsRequired()
                     .HasColumnAnnotation("Index", new IndexAnnotation(new IndexAttribute()));

         modelBuilder.Entity<global::Models.Model>()
                     .ToTable("Models", "dbo")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Models.Model>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Models.Model>()
                     .Property(t => t.Name)
                     .IsRequired()
                     .HasColumnAnnotation("Index", new IndexAnnotation(new IndexAttribute()));

         modelBuilder.Entity<global::Models.Product>()
                     .ToTable("Products", "dbo")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Models.Product>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Models.Product>()
                     .HasOptional(x => x.Type)
                     .WithMany(x => x.Products)
                     .Map(x => x.MapKey("TypeId"));
         modelBuilder.Entity<global::Models.Product>()
                     .HasOptional(x => x.Model)
                     .WithMany(x => x.Products)
                     .Map(x => x.MapKey("ModelId"));
         modelBuilder.Entity<global::Models.Product>()
                     .HasOptional(x => x.Make)
                     .WithMany(x => x.Products)
                     .Map(x => x.MapKey("MakeId"));
         modelBuilder.Entity<global::Models.Product>()
                     .HasMany(x => x.ProductImages)
                     .WithRequired(x => x.Product)
                     .Map(x => x.MapKey("ProductId"));

         modelBuilder.Entity<global::Models.ProductImage>()
                     .ToTable("ProductImages", "dbo")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Models.ProductImage>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Models.ProductImage>()
                     .Property(t => t.ImagePath)
                     .IsRequired();
         modelBuilder.Entity<global::Models.ProductImage>()
                     .Property(t => t.ImageDate)
                     .IsRequired();

         modelBuilder.Entity<global::Models.Type>()
                     .ToTable("Types", "dbo")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Models.Type>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Models.Type>()
                     .Property(t => t.Name)
                     .IsRequired()
                     .HasColumnAnnotation("Index", new IndexAnnotation(new IndexAttribute()));

         OnModelCreatedImpl(modelBuilder);
      }
   }
}
